#include <iostream.h>

using namespace std;

class Graph
{
    private:
    int numberOfVertices;
    int **AdjacencyMatrix;
   
    public:
    Graph(int noVertices)
    {
        this->numberOfVertices=noVertices;
       
        AdjacencyMatrix=new int*[numberOfVertices];
        for (int i=0;i<=noVertices-1;i++)
        {
            AdjacencyMatrix[i]=new int[numberOfVertices];
            for (int j=0;j<=noVertices-1;j++)
            {
                AdjacencyMatrix[i][j]=0;    
            }
           
        }
       
       
    }
   
    void AddEdge(int i, int j, int weight)
    {
        AdjacencyMatrix[i][j]=weight;
       
    }
    void PrintGraph()
    {
        cout<<"Number of Vertices:"<<numberOfVertices;
   
        for (int i=0;i<=numberOfVertices-1;i++)
        {
            for (int j=0;j<=numberOfVertices-1;j++)
            {
                if (AdjacencyMatrix[i][j]!=0)
                    cout<<"\nStart Vertex: "<<i<<" End Vertex: "<<j<<" weight:"<<AdjacencyMatrix[i][j];
                   
               
            }
           
        }
       
       
    }
};


int main()
{
    Graph g1(4);
    int SV, EV, EdgeWeight;
   
    g1.AddEdge(0,1,40);
    g1.AddEdge(0,2,50);
    g1.AddEdge(1,2,70);
    g1.AddEdge(2,3,80);
   
    cout<<"Enter Start Vertex";
    cin>>SV;
   
    cout<<"Enter End Vertex";
    cin>>EV;
   
    cout<<"Enter weight";
    cin>>EdgeWeight;
   
    g1.AddEdge(SV,EV,EdgeWeight);
   
    g1.PrintGraph();
    return 0;
}
